{"version":3,"sources":["components/SessionComp.tsx","components/Sessions.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SessionComp","props","session","react_default","a","createElement","times","day","hotel","type","level","href","concat","abbr","title","abstract","Sessions","sessions","map","components_SessionComp","key","id","App","Fragment","components_Sessions","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s45NA0BiBA,eAnBoB,SAACC,GAClC,IAAMC,EAAUD,EAAMC,QACtB,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKH,EAAQI,OAASJ,EAAQK,KAC9BJ,EAAAC,EAAAC,cAAA,UAAKH,EAAQM,OACbL,EAAAC,EAAAC,cAAA,UAAKH,EAAQO,KAAb,KAAqBP,EAAQQ,OAC7BP,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGM,KAAI,6GAAAC,OAA+GV,EAAQW,KAAvH,yBACFX,EAAQW,MAEZX,EAAQY,OAEbX,EAAAC,EAAAC,cAAA,UAAKH,EAAQa,aCUJC,EAvBiB,SAACf,GAC/B,OACEE,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,wBAGRF,EAAAC,EAAAC,cAAA,aACKJ,EAAMgB,SAASC,IAAI,SAAAhB,GAAO,OACrBC,EAAAC,EAAAC,cAACc,EAAD,CAAaC,IAAKlB,EAAQmB,GAAInB,QAASA,SCL5CoB,EATc,SAACrB,GAC5B,OACEE,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACEpB,EAAAC,EAAAC,cAACmB,EAAD,CAAUP,SAAUhB,EAAMgB,aCAZQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECXNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAKf,SAAUA,IAAagB,SAASC,eAAe,SDkI9D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ad4531fc.chunk.js","sourcesContent":["import { Session } from \"../model\";\nimport React from 'react';\n\ninterface Props {\n    session: Session\n}\n\nconst SessionComp: React.FC<Props> = (props: Props) => {\n    const session = props.session;\n    return (\n      <tr> \n        <td/>\n        <td>{session.times || session.day}</td>\n        <td>{session.hotel}</td>\n        <td>{session.type}, {session.level}</td>\n        <td>\n            <a href={`https://www.portal.reinvent.awsevents.com/connect/search.ww?trk=typed_bookmarked#loadSearch-searchPhrase=\"${session.abbr}\"&searchType=session`}>\n                {session.abbr}\n            </a>\n            {session.title}\n        </td>\n        <td>{session.abstract}</td>\n      </tr>\n    );\n  }\n  \n  export default SessionComp;","import { Session } from \"../model\";\nimport React from 'react';\nimport SessionComp from \"./SessionComp\";\n\ninterface Props {\n    sessions: Session[]\n}\n\nconst Sessions: React.FC<Props> = (props: Props) => {\n    return (\n      <table>\n          <thead>\n              <tr>\n                  <td/>\n                  <td>Day</td>\n                  <td>Hotel</td>\n                  <td/>\n                  <td>Title</td>\n                  <td>Abstract</td>\n              </tr>\n          </thead>\n          <tbody>\n              {props.sessions.map(session => \n                    <SessionComp key={session.id} session={session}></SessionComp>\n                )}\n          </tbody>\n\n      </table>\n    );\n  }\n  \n  export default Sessions;","import React from 'react';\nimport './App.css';\nimport { Session } from './model';\nimport Sessions from './components/Sessions';\n\ninterface Props {\n  sessions: Session[]\n}\n\nconst App: React.FC<Props> = (props: Props) => {\n  return (\n    <React.Fragment>\n      <Sessions sessions={props.sessions}></Sessions>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport sessions from \"./sessions.json\";\nimport { Session } from './model/index';\n\nReactDOM.render(<App sessions={sessions as Session[]}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}