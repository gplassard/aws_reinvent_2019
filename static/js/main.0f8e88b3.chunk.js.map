{"version":3,"sources":["components/SessionComp.tsx","components/Sessions.tsx","model/index.ts","components/SessionFilters.tsx","services/FirebaseService.ts","components/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SessionComp","props","session","react_default","a","createElement","TableRow","TableCell","Star","Delete","times","day","hotel","Chip","label","type","color","level","className","href","concat","abbr","title","abstract","Sessions","Table","TableHead","TableBody","sessions","map","components_SessionComp","key","id","DEFAULT_FILTERS","days","hotels","types","levels","favorites","deletes","description","SessionFilters","_useState","useState","_useState2","Object","slicedToArray","filters","setFilters","onFieldSelected","field","value","Array","isArray","v","onFiltersChange","react_select_browser_esm","placeholder","isMulti","onChange","options","_","uniq","s","TextField","margin","event","target","toLowerCase","FormControlLabel","control","Switch","sessionsCount","auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Navigation","_React$useState","React","_React$useState2","anchorEl","setAnchorEl","_React$useState3","currentUser","_React$useState4","loggedUser","setLoggedUser","handleClose","_login","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","signInAnonymously","stop","apply","this","arguments","_logout","_callee2","_context2","signOut","useEffect","onAuthStateChanged","user","AppBar","position","Toolbar","Typography","uid","AccountCircle","onClick","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","App","filteredSessions","deleted","state","setState","Fragment","src_components_Navigation","src_components_SessionFilters","filter","length","indexOf","includes","filterSession","objectSpread","console","table","components_Sessions","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f8e88b3.chunk.js","sourcesContent":["import { Session } from \"../model\";\nimport React from 'react';\nimport { TableRow, TableCell, Chip } from \"@material-ui/core\";\nimport {Star, Delete} from \"@material-ui/icons\";\n\ninterface Props {\n    session: Session\n}\n\nconst SessionComp: React.FC<Props> = (props: Props) => {\n    const session = props.session;\n    return (\n      <TableRow> \n        <TableCell><Star></Star><Delete></Delete></TableCell>\n        <TableCell>{session.times || session.day}</TableCell>\n        <TableCell>{session.hotel}</TableCell>\n        <TableCell>\n          <Chip label={ session.type} color=\"primary\"/>\n          <Chip label={ session.level} className={session.level}/>\n        </TableCell>\n        <TableCell>\n            <a href={`https://www.portal.reinvent.awsevents.com/connect/search.ww?trk=typed_bookmarked#loadSearch-searchPhrase=\"${session.abbr}\"&searchType=session`}>\n                {session.abbr}\n            </a>\n            {' '}\n            {session.title}\n        </TableCell>\n        <TableCell>{session.abstract}</TableCell>\n      </TableRow>\n    );\n  }\n  \n  export default SessionComp;","import { Session } from \"../model\";\nimport React from 'react';\nimport SessionComp from \"./SessionComp\";\nimport { Table, TableHead, TableRow, TableCell, TableBody } from \"@material-ui/core\";\n\ninterface Props {\n    sessions: Session[]\n}\n\nconst Sessions: React.FC<Props> = (props: Props) => {\n    return (\n      <Table>\n          <TableHead>\n              <TableRow>\n                  <TableCell/>\n                  <TableCell>Day</TableCell>\n                  <TableCell>Hotel</TableCell>\n                  <TableCell/>\n                  <TableCell>Title</TableCell>\n                  <TableCell>Abstract</TableCell>\n              </TableRow>\n          </TableHead>\n          <TableBody>\n              {props.sessions.map(session => \n                    <SessionComp key={session.id} session={session}></SessionComp>\n                )}\n          </TableBody>\n\n      </Table>\n    );\n  }\n  \n  export default Sessions;","export interface Session {\n    id: string;\n    abbr: string;\n    title: string;\n    abstract: string;\n    type: string;\n    day: string;\n    hotel: string;\n    level: string;\n    rooms: string;\n    times: string;\n}\n\nexport interface Filters {\n    hotels: string[];\n    days: string[];\n    types: string[];\n    levels: string[];\n    title: string | null;\n    favorites: boolean;\n    deletes: boolean;\n    description: string | null;\n}\n\nexport const DEFAULT_FILTERS: Filters =  {\n    days: [],\n    hotels: [],\n    types: [],\n    levels: [],\n    title: null,\n    favorites: false,\n    deletes: false,\n    description: null\n}\n","import { Session, Filters, DEFAULT_FILTERS } from \"../model\";\nimport React, { useState } from 'react';\nimport { Chip, TextField, FormControlLabel, Switch } from \"@material-ui/core\";\nimport _ from \"lodash\";\nimport Select from 'react-select';\nimport { ValueType } from \"react-select/src/types\";\nimport './SessionFilters.css';\n\ninterface Props {\n    sessions: Session[]\n    sessionsCount: number\n    onFiltersChange: (f:Filters) => any\n}\n\nconst SessionFilters: React.FC<Props> = (props: Props) => {\n    const sessions = props.sessions;\n    const [filters, setFilters] = useState(DEFAULT_FILTERS);\n\n    const onFieldSelected = (field: 'days' | 'levels' | 'types' | 'hotels') => (value: ValueType<{label: string, value: string}>) => {\n      filters[field] = Array.isArray(value) ? value.map(v => v.label) : [];\n      setFilters(filters);\n      props.onFiltersChange(filters);\n    };\n\n    const onFilterTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      filters.title =  event.target.value.toLowerCase()\n      setFilters(filters);\n      props.onFiltersChange(filters)\n    }\n\n    return (\n      <div className=\"SessionFilters\">\n        <Select\n            placeholder=\"Choose a day\"\n            isMulti={true}\n            onChange={onFieldSelected('days')}\n            options={_.uniq(sessions.map(s => s.day)).map(s => ({label: s, value: s})) }\n          />\n          <Select\n            placeholder=\"Choose a hotel\"\n            isMulti={true}\n            onChange={onFieldSelected('hotels')}\n            options={_.uniq(sessions.map(s => s.hotel)).map(s => ({label: s, value: s})) }\n          />\n          <Select\n            placeholder=\"Choose a session type\"\n            isMulti={true}\n            onChange={onFieldSelected('types')}\n            options={_.uniq(sessions.map(s => s.type)).map(s => ({label: s, value: s})) }\n          />\n        <Select\n            placeholder=\"Choose a session level\"\n            isMulti={true}\n            onChange={onFieldSelected('levels')}\n            options={_.uniq(sessions.map(s => s.level)).map(s => ({label: s, value: s})) }\n          />\n        <TextField\n          className=\"textField\"\n          label=\"Filter by title\"\n          placeholder=\"DynamoDB\"\n          margin=\"normal\"\n          onChange={onFilterTitleChange}\n        />\n         <FormControlLabel\n            className=\"switchField\"\n            control= {<Switch/>} \n            label=\"Favorites\"/>\n        <FormControlLabel\n            className=\"switchField\"\n            control= {<Switch/>} \n            label=\"Deleted\"/>\n          <Chip label={ props.sessionsCount + ' sessions'} color=\"primary\"/>\n        </div> \n    );\n  }\n  \n  export default SessionFilters;\n\n\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyBdZ1wW_Tsis9aCv242skTp5YvDGlrzIzk\",\n    authDomain: \"aws-reinvent-2019.firebaseapp.com\",\n    databaseURL: \"https://aws-reinvent-2019.firebaseio.com\",\n    projectId: \"aws-reinvent-2019\",\n    storageBucket: \"\",\n    messagingSenderId: \"326716357877\",\n    appId: \"1:326716357877:web:372d6d0b051ddb15\"\n};\n\nexport const app = firebase.initializeApp(config);\nexport const auth = firebase.auth();","import React from 'react';\nimport {AppBar, Toolbar, Typography, Menu, MenuItem} from \"@material-ui/core\";\nimport { AccountCircle } from '@material-ui/icons';\nimport './Navigation.css';\nimport { auth } from '../services/FirebaseService';\n\ninterface Props {\n}\n\nconst Navigation: React.FC<Props> = (props: Props) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [loggedUser, setLoggedUser]= React.useState(auth.currentUser);\n    \n    React.useEffect(() => {\n        return auth.onAuthStateChanged((user) => {\n            setLoggedUser(user);\n        })\n    }, []);\n\n    function handleClick(event: any) {\n      setAnchorEl(event.currentTarget);\n    }\n  \n    function handleClose() {\n      setAnchorEl(null);\n    }\n\n    async function login() {\n        await auth.signInAnonymously();\n        handleClose();\n    }\n\n    async function logout() {\n        await auth.signOut();\n        handleClose();\n    }\n  \n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography className=\"title\">AWS-REINVENT-2019</Typography>\n                {loggedUser ? <Typography >{loggedUser.uid}</Typography> : null}\n                <AccountCircle onClick={handleClick}></AccountCircle>\n                <Menu id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    {\n                        loggedUser === null ?\n                            <MenuItem onClick={login}>Login</MenuItem> :\n                            <MenuItem onClick={logout}>Logout</MenuItem>\n                    }\n                </Menu>\n            </Toolbar>\n        </AppBar>\n    );\n  }\n  \n  export default Navigation;","import React, { useState } from 'react';\nimport './App.css';\nimport { Session, Filters } from './model';\nimport Sessions from './components/Sessions';\nimport SessionFilters from './components/SessionFilters';\nimport Navigation from './components/Navigation';\n\ninterface Props {\n  sessions: Session[]\n}\n\ninterface State {\n  favorites:  {[id: string]: boolean}\n  deleted: {[id: string]: boolean}\n  filteredSessions: Session[]\n}\n\nconst filterSession = (session: Session, state: State, filters: Filters) => {\n  if (filters.days && filters.days.length && filters.days.indexOf(session.day) < 0) {\n    return false;\n  }\n  if (filters.types && filters.hotels.length && filters.hotels.indexOf(session.hotel) < 0) {\n    return false;\n  }\n  if (filters.types && filters.types.length && filters.types.indexOf(session.type) < 0) {\n    return false;\n  }\n  if (filters.levels && filters.levels.length && filters.levels.indexOf(session.level) < 0) {\n    return false;\n  }\n  if (filters.title && filters.title.length && !session.title.toLowerCase().includes(filters.title)) {\n    return false;\n  }\n  if (filters.favorites && state.favorites[session.id]) {\n    return false;\n  }\n  if (!filters.deletes && state.deleted[session.id]) {\n    return false;\n  }\n  return true;\n}\n\nconst App: React.FC<Props> = (props: Props) => {\n  const [state, setState] = useState({\n    filteredSessions: props.sessions, \n    deleted: {},\n    favorites: {}\n  });\n\n  const onFiltersChange = (filters: Filters) => {\n    const filteredSessions = props.sessions.filter(session => filterSession(session, state, filters));\n    setState({...state, filteredSessions});\n    console.table(\"new filters\", filters)\n  }\n\n  return (\n    <React.Fragment>\n      <Navigation></Navigation>\n      <SessionFilters sessions={props.sessions} onFiltersChange={onFiltersChange} sessionsCount={state.filteredSessions.length}></SessionFilters>\n      <Sessions sessions={state.filteredSessions}></Sessions>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport sessions from \"./sessions.json\";\nimport { Session } from './model/index';\n\nReactDOM.render(<App sessions={sessions as Session[]}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}